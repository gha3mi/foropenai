var tipuesearch = {"pages":[{"title":" ForOpenAI ","text":"ForOpenAI ForOpenAI : A Fortran library for OpenAI API. (Under Development!) How to use Prerequisites: On Ubuntu, you need to install the curl development headers. Use the following command: sudo apt install -y libcurl4-openssl-dev OpenAI API key: Create a file named .foropenai and insert your OpenAI API key. You can find your Secret API key in your OpenAI User settings . Make sure to keep the file name exactly as mentioned, starting with a dot (.). Clone the repository: You can clone the ForOpenAI repository from GitHub using the following command: git clone https://github.com/gha3mi/foropenai.git cd foropenai Use ChatGPT from the terminal: fpm run fpm dependency If you want to use ForOpenAI as a dependency in your own fpm project,\nyou can easily include it by adding the following line to your fpm.toml file: [dependencies] foropenai = { git = \"https://github.com/gha3mi/foropenai.git\" } API documentation To generate the API documentation for the ForOpenAI module using ford run the following\ncommand: ford ford.yml Contributing Contributions to ForOpenAI are welcome! If you find any issues or would like to suggest improvements, please open an issue. Developer Info Seyed Ali Ghasemi","tags":"home","loc":"index.html"},{"title":"ChatCompletion – ForOpenAI ","text":"type, public :: ChatCompletion Inherits type~~chatcompletion~~InheritsGraph type~chatcompletion ChatCompletion response_type response_type type~chatcompletion->response_type response Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Inherited by type~~chatcompletion~~InheritedByGraph type~chatcompletion ChatCompletion type~openai openai type~openai->type~chatcompletion ChatCompletion Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables response Type-Bound Procedures create Source Code ChatCompletion Components Type Visibility Attributes Name Initial type(response_type), public :: response Type-Bound Procedures procedure, public,  :: create private  subroutine create (this, model, messages) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( ChatCompletion ), intent(inout) :: this character(len=*), intent(in) :: model character(len=*), intent(in) :: messages Source Code type :: ChatCompletion type ( response_type ) :: response contains procedure :: create end type ChatCompletion","tags":"","loc":"type/chatcompletion.html"},{"title":"model – ForOpenAI ","text":"type, public :: model Inherits type~~model~~InheritsGraph type~model model response_type response_type type~model->response_type response Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Inherited by type~~model~~InheritedByGraph type~model model type~openai openai type~openai->type~model model Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables response id Type-Bound Procedures list retrieve Source Code model Components Type Visibility Attributes Name Initial type(response_type), public :: response character(len=256), public :: id Type-Bound Procedures procedure, public,  :: list private  subroutine list (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( model ), intent(inout) :: this procedure, public,  :: retrieve private  subroutine retrieve (this, id) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( model ), intent(inout) :: this character(len=*), intent(in) :: id Source Code type :: model type ( response_type ) :: response character ( 256 ) :: id contains procedure :: list procedure :: retrieve end type model","tags":"","loc":"type/model.html"},{"title":"openai – ForOpenAI ","text":"type, public :: openai Inherits type~~openai~~InheritsGraph type~openai openai type~chatcompletion ChatCompletion type~openai->type~chatcompletion ChatCompletion type~model model type~openai->type~model model response_type response_type type~chatcompletion->response_type response type~model->response_type response Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables api_key model ChatCompletion Type-Bound Procedures chat_gpt Source Code openai Components Type Visibility Attributes Name Initial character(len=256), public :: api_key type( model ), public :: model type( ChatCompletion ), public :: ChatCompletion Type-Bound Procedures procedure, public,  :: chat_gpt private  subroutine chat_gpt (this, user_input) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( openai ), intent(inout) :: this character(len=1000), intent(in), optional :: user_input Source Code type openai character ( 256 ) :: api_key type ( model ) :: model type ( ChatCompletion ) :: ChatCompletion contains procedure :: chat_gpt end type openai","tags":"","loc":"type/openai.html"},{"title":"set_api_key – ForOpenAI","text":"public  function set_api_key(file_name_settings) result(key1) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: file_name_settings Return Value character(len=256) Called by proc~~set_api_key~~CalledByGraph proc~set_api_key foropenai_api_key::set_api_key program~test1 test1 program~test1->proc~set_api_key program~test2 test2 program~test2->proc~set_api_key program~test3 test3 program~test3->proc~set_api_key Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code set_api_key Source Code function set_api_key ( file_name_settings ) result ( key1 ) character ( * ), intent ( in ) :: file_name_settings character ( 256 ) :: key1 integer :: nunit , n open ( newunit = nunit , file = trim ( file_name_settings ), status = \"old\" , action = \"read\" , iostat = n ) if ( n /= 0 ) then print * , \"error opening the file: \" , trim ( file_name_settings ) stop end if read ( nunit , '(a)' , iostat = n ) key1 close ( nunit ) end function set_api_key","tags":"","loc":"proc/set_api_key.html"},{"title":"create – ForOpenAI","text":"private  subroutine create(this, model, messages) Type Bound ChatCompletion Arguments Type Intent Optional Attributes Name class( ChatCompletion ), intent(inout) :: this character(len=*), intent(in) :: model character(len=*), intent(in) :: messages Calls proc~~create~~CallsGraph proc~create foropenai_ChatCompletion::ChatCompletion%create pair_type pair_type proc~create->pair_type request request proc~create->request Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code create Source Code subroutine create ( this , model , messages ) class ( ChatCompletion ), intent ( inout ) :: this character ( * ), intent ( in ) :: model character ( * ), intent ( in ) :: messages type ( pair_type ), allocatable :: req_header (:) req_header = [& pair_type ( 'Content-Type' , 'application/json' ),& pair_type ( 'Authorization' , 'Bearer ' // api_key // '' )& ] this % response = request (& url = 'https://api.openai.com/v1/chat/completions' ,& method = HTTP_POST , data = messages , header = req_header ) if (. not . this % response % ok ) then print * , 'Error message:' , this % response % err_msg print * , 'Sorry, an error occurred while processing your request.' else print * , \"ChatGPT: \" print * , this % response % content end if end subroutine create","tags":"","loc":"proc/create.html"},{"title":"list – ForOpenAI","text":"private  subroutine list(this) Type Bound model Arguments Type Intent Optional Attributes Name class( model ), intent(inout) :: this Calls proc~~list~~CallsGraph proc~list foropenai_model::model%list pair_type pair_type proc~list->pair_type request request proc~list->request Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code list Source Code subroutine list ( this ) class ( model ), intent ( inout ) :: this type ( pair_type ), allocatable :: req_header (:) character (:), allocatable :: json_data req_header = [& pair_type ( 'Authorization' , 'Bearer ' // trim ( api_key ) // '' )& ] json_data = '' this % response = request (& url = 'https://api.openai.com/v1/models' ,& method = HTTP_GET , data = json_data , header = req_header ) if (. not . this % response % ok ) then print * , 'Error message:' , this % response % err_msg print * , 'Sorry, an error occurred while processing your request.' else print * , this % response % content end if end subroutine list","tags":"","loc":"proc/list.html"},{"title":"retrieve – ForOpenAI","text":"private  subroutine retrieve(this, id) Type Bound model Arguments Type Intent Optional Attributes Name class( model ), intent(inout) :: this character(len=*), intent(in) :: id Calls proc~~retrieve~~CallsGraph proc~retrieve foropenai_model::model%retrieve pair_type pair_type proc~retrieve->pair_type request request proc~retrieve->request Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code retrieve Source Code subroutine retrieve ( this , id ) class ( model ), intent ( inout ) :: this character ( * ), intent ( in ) :: id type ( pair_type ), allocatable :: req_header (:) character (:), allocatable :: json_data req_header = [& pair_type ( 'Authorization' , 'Bearer ' // trim ( api_key ) // '' )& ] json_data = '' this % response = request (& url = 'https://api.openai.com/v1/models/' // trim ( id ),& method = HTTP_GET , data = json_data , header = req_header ) if (. not . this % response % ok ) then print * , 'Error message:' , this % response % err_msg print * , 'Sorry, an error occurred while processing your request.' else print * , this % response % content end if end subroutine retrieve","tags":"","loc":"proc/retrieve.html"},{"title":"chat_gpt – ForOpenAI","text":"private  subroutine chat_gpt(this, user_input) Type Bound openai Arguments Type Intent Optional Attributes Name class( openai ), intent(inout) :: this character(len=1000), intent(in), optional :: user_input Contents Source Code chat_gpt Source Code subroutine chat_gpt ( this , user_input ) class ( openai ), intent ( inout ) :: this character ( len = 1000 ), intent ( in ), optional :: user_input character ( len = 1000 ) :: input character (:), allocatable :: output type ( pair_type ), allocatable :: req_header (:) character (:), allocatable :: json_data print * , \"Hello! I am ChatGPT.\" print * , \"Type exit to end the conversation.\" do print * , \"You: \" if ( present ( user_input )) then input = user_input else read * , input end if if ( input == \"exit\" ) exit call this % ChatCompletion % create (& model = this % model % id ,& messages = '{' // & '\"model\":\"' // trim ( this % model % id ) // '\",' // & '\"text\":\"' // trim ( input ) // '\",' // & '\"messages\": [{\"role\": \"user\", \"content\": \"Say this is a test!\"}]' // & '}' & ) end do print * , \"Goodbye! Have a nice day.\" end subroutine chat_gpt","tags":"","loc":"proc/chat_gpt.html"},{"title":"foropenai_api_key – ForOpenAI","text":"Used by module~~foropenai_api_key~~UsedByGraph module~foropenai_api_key foropenai_api_key module~foropenai foropenai module~foropenai->module~foropenai_api_key module~foropenai_chatcompletion foropenai_ChatCompletion module~foropenai->module~foropenai_chatcompletion module~foropenai_model foropenai_model module~foropenai->module~foropenai_model module~foropenai_chatcompletion->module~foropenai_api_key module~foropenai_model->module~foropenai_api_key program~test1 test1 program~test1->module~foropenai program~test2 test2 program~test2->module~foropenai program~test3 test3 program~test3->module~foropenai Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables api_key Functions set_api_key Variables Type Visibility Attributes Name Initial character(len=256), public :: api_key Functions public  function set_api_key (file_name_settings) result(key1) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: file_name_settings Return Value character(len=256)","tags":"","loc":"module/foropenai_api_key.html"},{"title":"foropenai_ChatCompletion – ForOpenAI","text":"Uses http foropenai_api_key module~~foropenai_chatcompletion~~UsesGraph module~foropenai_chatcompletion foropenai_ChatCompletion http http module~foropenai_chatcompletion->http module~foropenai_api_key foropenai_api_key module~foropenai_chatcompletion->module~foropenai_api_key Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~foropenai_chatcompletion~~UsedByGraph module~foropenai_chatcompletion foropenai_ChatCompletion module~foropenai foropenai module~foropenai->module~foropenai_chatcompletion program~test1 test1 program~test1->module~foropenai program~test2 test2 program~test2->module~foropenai program~test3 test3 program~test3->module~foropenai Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Derived Types ChatCompletion Subroutines create Derived Types type, public :: ChatCompletion Components Type Visibility Attributes Name Initial type(response_type), public :: response Type-Bound Procedures procedure\n                    ,                  public\n,                   :: create Subroutine Subroutines private  subroutine create (this, model, messages) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( ChatCompletion ), intent(inout) :: this character(len=*), intent(in) :: model character(len=*), intent(in) :: messages","tags":"","loc":"module/foropenai_chatcompletion.html"},{"title":"foropenai_model – ForOpenAI","text":"Uses http foropenai_api_key module~~foropenai_model~~UsesGraph module~foropenai_model foropenai_model http http module~foropenai_model->http module~foropenai_api_key foropenai_api_key module~foropenai_model->module~foropenai_api_key Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~foropenai_model~~UsedByGraph module~foropenai_model foropenai_model module~foropenai foropenai module~foropenai->module~foropenai_model program~test1 test1 program~test1->module~foropenai program~test2 test2 program~test2->module~foropenai program~test3 test3 program~test3->module~foropenai Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Derived Types model Subroutines list retrieve Derived Types type, public :: model Components Type Visibility Attributes Name Initial type(response_type), public :: response character(len=256), public :: id Type-Bound Procedures procedure\n                    ,                  public\n,                   :: list Subroutine procedure\n                    ,                  public\n,                   :: retrieve Subroutine Subroutines private  subroutine list (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( model ), intent(inout) :: this private  subroutine retrieve (this, id) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( model ), intent(inout) :: this character(len=*), intent(in) :: id","tags":"","loc":"module/foropenai_model.html"},{"title":"foropenai – ForOpenAI","text":"Uses foropenai_model foropenai_ChatCompletion http foropenai_api_key module~~foropenai~~UsesGraph module~foropenai foropenai http http module~foropenai->http module~foropenai_api_key foropenai_api_key module~foropenai->module~foropenai_api_key module~foropenai_chatcompletion foropenai_ChatCompletion module~foropenai->module~foropenai_chatcompletion module~foropenai_model foropenai_model module~foropenai->module~foropenai_model module~foropenai_chatcompletion->http module~foropenai_chatcompletion->module~foropenai_api_key module~foropenai_model->http module~foropenai_model->module~foropenai_api_key Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~foropenai~~UsedByGraph module~foropenai foropenai program~test1 test1 program~test1->module~foropenai program~test2 test2 program~test2->module~foropenai program~test3 test3 program~test3->module~foropenai Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Derived Types openai Subroutines chat_gpt Derived Types type, public :: openai Components Type Visibility Attributes Name Initial character(len=256), public :: api_key type( model ), public :: model type( ChatCompletion ), public :: ChatCompletion Type-Bound Procedures procedure\n                    ,                  public\n,                   :: chat_gpt Subroutine Subroutines private  subroutine chat_gpt (this, user_input) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( openai ), intent(inout) :: this character(len=1000), intent(in), optional :: user_input","tags":"","loc":"module/foropenai.html"},{"title":"test2 – ForOpenAI","text":"Uses foropenai program~~test2~~UsesGraph program~test2 test2 module~foropenai foropenai program~test2->module~foropenai http http module~foropenai->http module~foropenai_api_key foropenai_api_key module~foropenai->module~foropenai_api_key module~foropenai_chatcompletion foropenai_ChatCompletion module~foropenai->module~foropenai_chatcompletion module~foropenai_model foropenai_model module~foropenai->module~foropenai_model module~foropenai_chatcompletion->http module~foropenai_chatcompletion->module~foropenai_api_key module~foropenai_model->http module~foropenai_model->module~foropenai_api_key Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test2~~CallsGraph program~test2 test2 proc~set_api_key foropenai_api_key::set_api_key program~test2->proc~set_api_key Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables oai user_input Source Code test2 Variables Type Attributes Name Initial type( openai ) :: oai character(len=1000) :: user_input Source Code program test2 use foropenai , only : openai , api_key , set_api_key implicit none type ( openai ) :: oai character ( len = 1000 ) :: user_input api_key = set_api_key ( '.foropenai' ) call oai % model % retrieve ( 'text-davinci-003' ) end program test2","tags":"","loc":"program/test2.html"},{"title":"test3 – ForOpenAI","text":"Uses foropenai program~~test3~~UsesGraph program~test3 test3 module~foropenai foropenai program~test3->module~foropenai http http module~foropenai->http module~foropenai_api_key foropenai_api_key module~foropenai->module~foropenai_api_key module~foropenai_chatcompletion foropenai_ChatCompletion module~foropenai->module~foropenai_chatcompletion module~foropenai_model foropenai_model module~foropenai->module~foropenai_model module~foropenai_chatcompletion->http module~foropenai_chatcompletion->module~foropenai_api_key module~foropenai_model->http module~foropenai_model->module~foropenai_api_key Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test3~~CallsGraph program~test3 test3 proc~set_api_key foropenai_api_key::set_api_key program~test3->proc~set_api_key Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables oai user_input Source Code test3 Variables Type Attributes Name Initial type( openai ) :: oai character(len=1000) :: user_input Source Code program test3 use foropenai , only : openai , api_key , set_api_key implicit none type ( openai ) :: oai character ( len = 1000 ) :: user_input api_key = set_api_key ( '.foropenai' ) call oai % ChatCompletion % create (& model = 'gpt-3.5-turbo' ,& messages = & '{}' & ) end program test3","tags":"","loc":"program/test3.html"},{"title":"test1 – ForOpenAI","text":"Uses foropenai program~~test1~~UsesGraph program~test1 test1 module~foropenai foropenai program~test1->module~foropenai http http module~foropenai->http module~foropenai_api_key foropenai_api_key module~foropenai->module~foropenai_api_key module~foropenai_chatcompletion foropenai_ChatCompletion module~foropenai->module~foropenai_chatcompletion module~foropenai_model foropenai_model module~foropenai->module~foropenai_model module~foropenai_chatcompletion->http module~foropenai_chatcompletion->module~foropenai_api_key module~foropenai_model->http module~foropenai_model->module~foropenai_api_key Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test1~~CallsGraph program~test1 test1 proc~set_api_key foropenai_api_key::set_api_key program~test1->proc~set_api_key Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables oai user_input Source Code test1 Variables Type Attributes Name Initial type( openai ) :: oai character(len=1000) :: user_input Source Code program test1 use foropenai , only : openai , api_key , set_api_key implicit none type ( openai ) :: oai character ( len = 1000 ) :: user_input api_key = set_api_key ( '.foropenai' ) call oai % model % list () end program test1","tags":"","loc":"program/test1.html"},{"title":"foropenai_api_key.f90 – ForOpenAI","text":"Files dependent on this one sourcefile~~foropenai_api_key.f90~~AfferentGraph sourcefile~foropenai_api_key.f90 foropenai_api_key.f90 sourcefile~foropenai.f90 foropenai.f90 sourcefile~foropenai.f90->sourcefile~foropenai_api_key.f90 sourcefile~foropenai_chatcompletion.f90 foropenai_ChatCompletion.f90 sourcefile~foropenai.f90->sourcefile~foropenai_chatcompletion.f90 sourcefile~foropenai_model.f90 foropenai_model.f90 sourcefile~foropenai.f90->sourcefile~foropenai_model.f90 sourcefile~foropenai_chatcompletion.f90->sourcefile~foropenai_api_key.f90 sourcefile~foropenai_model.f90->sourcefile~foropenai_api_key.f90 sourcefile~test1.f90 test1.f90 sourcefile~test1.f90->sourcefile~foropenai.f90 sourcefile~test2.f90 test2.f90 sourcefile~test2.f90->sourcefile~foropenai.f90 sourcefile~test3.f90 test3.f90 sourcefile~test3.f90->sourcefile~foropenai.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Modules foropenai_api_key Source Code foropenai_api_key.f90 Source Code module foropenai_api_key implicit none private public :: api_key , set_api_key character ( 256 ) :: api_key contains !=============================================================================== !> author: Seyed Ali Ghasemi function set_api_key ( file_name_settings ) result ( key1 ) character ( * ), intent ( in ) :: file_name_settings character ( 256 ) :: key1 integer :: nunit , n open ( newunit = nunit , file = trim ( file_name_settings ), status = \"old\" , action = \"read\" , iostat = n ) if ( n /= 0 ) then print * , \"error opening the file: \" , trim ( file_name_settings ) stop end if read ( nunit , '(a)' , iostat = n ) key1 close ( nunit ) end function set_api_key !=============================================================================== end module foropenai_api_key","tags":"","loc":"sourcefile/foropenai_api_key.f90.html"},{"title":"foropenai_ChatCompletion.f90 – ForOpenAI","text":"This file depends on sourcefile~~foropenai_chatcompletion.f90~~EfferentGraph sourcefile~foropenai_chatcompletion.f90 foropenai_ChatCompletion.f90 sourcefile~foropenai_api_key.f90 foropenai_api_key.f90 sourcefile~foropenai_chatcompletion.f90->sourcefile~foropenai_api_key.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~foropenai_chatcompletion.f90~~AfferentGraph sourcefile~foropenai_chatcompletion.f90 foropenai_ChatCompletion.f90 sourcefile~foropenai.f90 foropenai.f90 sourcefile~foropenai.f90->sourcefile~foropenai_chatcompletion.f90 sourcefile~test1.f90 test1.f90 sourcefile~test1.f90->sourcefile~foropenai.f90 sourcefile~test2.f90 test2.f90 sourcefile~test2.f90->sourcefile~foropenai.f90 sourcefile~test3.f90 test3.f90 sourcefile~test3.f90->sourcefile~foropenai.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Modules foropenai_ChatCompletion Source Code foropenai_ChatCompletion.f90 Source Code module foropenai_ChatCompletion use foropenai_api_key , only : api_key use http , only : response_type , request , HTTP_POST , pair_type implicit none private public ChatCompletion !=============================================================================== type :: ChatCompletion type ( response_type ) :: response contains procedure :: create end type ChatCompletion !=============================================================================== contains !=============================================================================== !> author: Seyed Ali Ghasemi subroutine create ( this , model , messages ) class ( ChatCompletion ), intent ( inout ) :: this character ( * ), intent ( in ) :: model character ( * ), intent ( in ) :: messages type ( pair_type ), allocatable :: req_header (:) req_header = [& pair_type ( 'Content-Type' , 'application/json' ),& pair_type ( 'Authorization' , 'Bearer ' // api_key // '' )& ] this % response = request (& url = 'https://api.openai.com/v1/chat/completions' ,& method = HTTP_POST , data = messages , header = req_header ) if (. not . this % response % ok ) then print * , 'Error message:' , this % response % err_msg print * , 'Sorry, an error occurred while processing your request.' else print * , \"ChatGPT: \" print * , this % response % content end if end subroutine create !=============================================================================== end module foropenai_ChatCompletion","tags":"","loc":"sourcefile/foropenai_chatcompletion.f90.html"},{"title":"foropenai_model.f90 – ForOpenAI","text":"This file depends on sourcefile~~foropenai_model.f90~~EfferentGraph sourcefile~foropenai_model.f90 foropenai_model.f90 sourcefile~foropenai_api_key.f90 foropenai_api_key.f90 sourcefile~foropenai_model.f90->sourcefile~foropenai_api_key.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~foropenai_model.f90~~AfferentGraph sourcefile~foropenai_model.f90 foropenai_model.f90 sourcefile~foropenai.f90 foropenai.f90 sourcefile~foropenai.f90->sourcefile~foropenai_model.f90 sourcefile~test1.f90 test1.f90 sourcefile~test1.f90->sourcefile~foropenai.f90 sourcefile~test2.f90 test2.f90 sourcefile~test2.f90->sourcefile~foropenai.f90 sourcefile~test3.f90 test3.f90 sourcefile~test3.f90->sourcefile~foropenai.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Modules foropenai_model Source Code foropenai_model.f90 Source Code module foropenai_model use foropenai_api_key , only : api_key use http , only : response_type , request , HTTP_GET , pair_type implicit none private public model !=============================================================================== type :: model type ( response_type ) :: response character ( 256 ) :: id contains procedure :: list procedure :: retrieve end type model !=============================================================================== contains !=============================================================================== !> author: Seyed Ali Ghasemi subroutine list ( this ) class ( model ), intent ( inout ) :: this type ( pair_type ), allocatable :: req_header (:) character (:), allocatable :: json_data req_header = [& pair_type ( 'Authorization' , 'Bearer ' // trim ( api_key ) // '' )& ] json_data = '' this % response = request (& url = 'https://api.openai.com/v1/models' ,& method = HTTP_GET , data = json_data , header = req_header ) if (. not . this % response % ok ) then print * , 'Error message:' , this % response % err_msg print * , 'Sorry, an error occurred while processing your request.' else print * , this % response % content end if end subroutine list !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi subroutine retrieve ( this , id ) class ( model ), intent ( inout ) :: this character ( * ), intent ( in ) :: id type ( pair_type ), allocatable :: req_header (:) character (:), allocatable :: json_data req_header = [& pair_type ( 'Authorization' , 'Bearer ' // trim ( api_key ) // '' )& ] json_data = '' this % response = request (& url = 'https://api.openai.com/v1/models/' // trim ( id ),& method = HTTP_GET , data = json_data , header = req_header ) if (. not . this % response % ok ) then print * , 'Error message:' , this % response % err_msg print * , 'Sorry, an error occurred while processing your request.' else print * , this % response % content end if end subroutine retrieve !=============================================================================== end module foropenai_model","tags":"","loc":"sourcefile/foropenai_model.f90.html"},{"title":"foropenai.f90 – ForOpenAI","text":"This file depends on sourcefile~~foropenai.f90~~EfferentGraph sourcefile~foropenai.f90 foropenai.f90 sourcefile~foropenai_api_key.f90 foropenai_api_key.f90 sourcefile~foropenai.f90->sourcefile~foropenai_api_key.f90 sourcefile~foropenai_chatcompletion.f90 foropenai_ChatCompletion.f90 sourcefile~foropenai.f90->sourcefile~foropenai_chatcompletion.f90 sourcefile~foropenai_model.f90 foropenai_model.f90 sourcefile~foropenai.f90->sourcefile~foropenai_model.f90 sourcefile~foropenai_chatcompletion.f90->sourcefile~foropenai_api_key.f90 sourcefile~foropenai_model.f90->sourcefile~foropenai_api_key.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~foropenai.f90~~AfferentGraph sourcefile~foropenai.f90 foropenai.f90 sourcefile~test1.f90 test1.f90 sourcefile~test1.f90->sourcefile~foropenai.f90 sourcefile~test2.f90 test2.f90 sourcefile~test2.f90->sourcefile~foropenai.f90 sourcefile~test3.f90 test3.f90 sourcefile~test3.f90->sourcefile~foropenai.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Modules foropenai Source Code foropenai.f90 Source Code module foropenai use foropenai_api_key , only : api_key , set_api_key use foropenai_model , only : model use foropenai_ChatCompletion , only : ChatCompletion use http , only : response_type , request , HTTP_POST , HTTP_GET , pair_type implicit none private public openai , api_key , set_api_key !=============================================================================== type openai character ( 256 ) :: api_key type ( model ) :: model type ( ChatCompletion ) :: ChatCompletion contains procedure :: chat_gpt end type openai !=============================================================================== contains !=============================================================================== !> author: Seyed Ali Ghasemi subroutine chat_gpt ( this , user_input ) class ( openai ), intent ( inout ) :: this character ( len = 1000 ), intent ( in ), optional :: user_input character ( len = 1000 ) :: input character (:), allocatable :: output type ( pair_type ), allocatable :: req_header (:) character (:), allocatable :: json_data print * , \"Hello! I am ChatGPT.\" print * , \"Type exit to end the conversation.\" do print * , \"You: \" if ( present ( user_input )) then input = user_input else read * , input end if if ( input == \"exit\" ) exit call this % ChatCompletion % create (& model = this % model % id ,& messages = '{' // & '\"model\":\"' // trim ( this % model % id ) // '\",' // & '\"text\":\"' // trim ( input ) // '\",' // & '\"messages\": [{\"role\": \"user\", \"content\": \"Say this is a test!\"}]' // & '}' & ) end do print * , \"Goodbye! Have a nice day.\" end subroutine chat_gpt !=============================================================================== end module foropenai","tags":"","loc":"sourcefile/foropenai.f90.html"},{"title":"test2.f90 – ForOpenAI","text":"This file depends on sourcefile~~test2.f90~~EfferentGraph sourcefile~test2.f90 test2.f90 sourcefile~foropenai.f90 foropenai.f90 sourcefile~test2.f90->sourcefile~foropenai.f90 sourcefile~foropenai_api_key.f90 foropenai_api_key.f90 sourcefile~foropenai.f90->sourcefile~foropenai_api_key.f90 sourcefile~foropenai_chatcompletion.f90 foropenai_ChatCompletion.f90 sourcefile~foropenai.f90->sourcefile~foropenai_chatcompletion.f90 sourcefile~foropenai_model.f90 foropenai_model.f90 sourcefile~foropenai.f90->sourcefile~foropenai_model.f90 sourcefile~foropenai_chatcompletion.f90->sourcefile~foropenai_api_key.f90 sourcefile~foropenai_model.f90->sourcefile~foropenai_api_key.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Programs test2 Source Code test2.f90 Source Code program test2 use foropenai , only : openai , api_key , set_api_key implicit none type ( openai ) :: oai character ( len = 1000 ) :: user_input api_key = set_api_key ( '.foropenai' ) call oai % model % retrieve ( 'text-davinci-003' ) end program test2","tags":"","loc":"sourcefile/test2.f90.html"},{"title":"test3.f90 – ForOpenAI","text":"This file depends on sourcefile~~test3.f90~~EfferentGraph sourcefile~test3.f90 test3.f90 sourcefile~foropenai.f90 foropenai.f90 sourcefile~test3.f90->sourcefile~foropenai.f90 sourcefile~foropenai_api_key.f90 foropenai_api_key.f90 sourcefile~foropenai.f90->sourcefile~foropenai_api_key.f90 sourcefile~foropenai_chatcompletion.f90 foropenai_ChatCompletion.f90 sourcefile~foropenai.f90->sourcefile~foropenai_chatcompletion.f90 sourcefile~foropenai_model.f90 foropenai_model.f90 sourcefile~foropenai.f90->sourcefile~foropenai_model.f90 sourcefile~foropenai_chatcompletion.f90->sourcefile~foropenai_api_key.f90 sourcefile~foropenai_model.f90->sourcefile~foropenai_api_key.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Programs test3 Source Code test3.f90 Source Code program test3 use foropenai , only : openai , api_key , set_api_key implicit none type ( openai ) :: oai character ( len = 1000 ) :: user_input api_key = set_api_key ( '.foropenai' ) call oai % ChatCompletion % create (& model = 'gpt-3.5-turbo' ,& messages = & '{}' & ) end program test3","tags":"","loc":"sourcefile/test3.f90.html"},{"title":"test1.f90 – ForOpenAI","text":"This file depends on sourcefile~~test1.f90~~EfferentGraph sourcefile~test1.f90 test1.f90 sourcefile~foropenai.f90 foropenai.f90 sourcefile~test1.f90->sourcefile~foropenai.f90 sourcefile~foropenai_api_key.f90 foropenai_api_key.f90 sourcefile~foropenai.f90->sourcefile~foropenai_api_key.f90 sourcefile~foropenai_chatcompletion.f90 foropenai_ChatCompletion.f90 sourcefile~foropenai.f90->sourcefile~foropenai_chatcompletion.f90 sourcefile~foropenai_model.f90 foropenai_model.f90 sourcefile~foropenai.f90->sourcefile~foropenai_model.f90 sourcefile~foropenai_chatcompletion.f90->sourcefile~foropenai_api_key.f90 sourcefile~foropenai_model.f90->sourcefile~foropenai_api_key.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Programs test1 Source Code test1.f90 Source Code program test1 use foropenai , only : openai , api_key , set_api_key implicit none type ( openai ) :: oai character ( len = 1000 ) :: user_input api_key = set_api_key ( '.foropenai' ) call oai % model % list () end program test1","tags":"","loc":"sourcefile/test1.f90.html"}]}